version: '3.8'

services:
  # ========================================
  # PostgreSQL 数据库
  # ========================================
  postgres:
    image: postgres:16-alpine
    container_name: akaiito-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-akaiito}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - akaiito-network
    healthcheck:
      test: [CMD-SHELL, 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # Redis 缓存
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: akaiito-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - akaiito-network
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # NestJS 应用
  # ========================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    container_name: akaiito-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000

      # 数据库配置
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-akaiito}

      # Redis 配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 0

      # JWT 配置（生产环境必须修改）
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET:-default_admin_jwt_secret_change_in_production}
      ADMIN_JWT_REFRESH_SECRET: ${ADMIN_JWT_REFRESH_SECRET:-default_admin_refresh_secret_change_in_production}
      CLIENT_JWT_SECRET: ${CLIENT_JWT_SECRET:-default_client_jwt_secret_change_in_production}
      CLIENT_JWT_REFRESH_SECRET: ${CLIENT_JWT_REFRESH_SECRET:-default_client_refresh_secret_change_in_production}

      # RSA 密钥路径
      ADMIN_RSA_PRIVATE_KEY_PATH: /app/secrets/admin_private.key
      ADMIN_RSA_PUBLIC_KEY_PATH: /app/secrets/admin_public.key
      CLIENT_RSA_PRIVATE_KEY_PATH: /app/secrets/client_private.key
      CLIENT_RSA_PUBLIC_KEY_PATH: /app/secrets/client_public.key

      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIR: /app/logs
      LOG_MAX_FILES: ${LOG_MAX_FILES:-30d}
      LOG_MAX_SIZE: ${LOG_MAX_SIZE:-100m}
      LOG_DATE_PATTERN: ${LOG_DATE_PATTERN:-YYYY-MM-DD}

      # 上传目录
      UPLOAD_DIR: /app/uploads
    ports:
      - '${APP_PORT:-3000}:3000'
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - ./rsa:/app/secrets:ro # RSA 密钥只读挂载
    networks:
      - akaiito-network
    healthcheck:
      test: [CMD, curl, -f, 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3

  # ========================================
  # Nginx 反向代理（可选）
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: akaiito-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - '${NGINX_HTTP_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - akaiito-network
    healthcheck:
      test: [CMD, wget, --quiet, --tries=1, --spider, 'http://localhost/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

# ========================================
# 网络配置
# ========================================
networks:
  akaiito-network:
    driver: bridge

# ========================================
# 数据卷
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
