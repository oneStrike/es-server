import type { NestFastifyApplication } from '@nestjs/platform-fastify'
import * as process from 'node:process'
import fastifyCsrf from '@fastify/csrf-protection'
import { NestFactory } from '@nestjs/core'
import { FastifyAdapter } from '@nestjs/platform-fastify'

import { AppModule } from '@/app.module'
import { LoggerFactoryService } from '@/common/module/logger/logger-factory.service'
import { AdminModule } from '@/modules/admin/admin.module'
import { ClientModule } from '@/modules/client/client.module'
import { setupMultipart } from '@/nestjs/multipart'
import { setupSwagger } from '@/nestjs/swagger'

declare const module: any

async function bootstrap() {
  const fastifyAdapter = new FastifyAdapter()
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    fastifyAdapter,
    {
      bufferLogs: true, // ÁºìÂÜ≤Êó•ÂøóÔºåÁ≠âÂæÖËá™ÂÆö‰πâloggerÂàùÂßãÂåñ
    },
  )

  // ËÆæÁΩÆËá™ÂÆö‰πâÊó•ÂøóÊúçÂä°
  const loggerFactory = app.get(LoggerFactoryService)
  const logger = loggerFactory.createGlobalLogger('Application')
  app.useLogger(logger)
  app.enableCors()

  app.select(AdminModule)
  app.select(ClientModule)

  app.setGlobalPrefix('api')

  await setupMultipart(fastifyAdapter, app)
  await app.register(fastifyCsrf)
  setupSwagger(app)

  await app.listen(process.env.PORT ?? 3000)

  // ÊâìÂç∞ËÆøÈóÆÂú∞ÂùÄÔºàÊéßÂà∂Âè∞ÊòæÁ§∫Ôºâ
  console.log(`üöÄ Â∫îÁî®Á®ãÂ∫èÂ∑≤ÂêØÂä®`)
  console.log(`üìç Êú¨Âú∞ËÆøÈóÆÂú∞ÂùÄ: http://localhost:${port}`)
  console.log(`üìç ÁΩëÁªúËÆøÈóÆÂú∞ÂùÄ: http://127.0.0.1:${port}`)
  console.log(`üìñ API ÊñáÊ°£Âú∞ÂùÄ: http://localhost:${port}/api/docs`)
  console.log(`üîß ÁÆ°ÁêÜÂêéÂè∞ API: http://localhost:${port}/api/admin`)
  console.log(`üë• ÂÆ¢Êà∑Á´Ø API: http://localhost:${port}/api/client`)

  if (module.hot) {
    module.hot.accept()
    module.hot.dispose(async () => {
      logger.info('Â∫îÁî®Á®ãÂ∫èÊ≠£Âú®ÁÉ≠ÈáçËΩΩ...')
      await app.close()
    })
  }
}

bootstrap().catch((error) => {
  console.error('Â∫îÁî®Á®ãÂ∫èÂêØÂä®Â§±Ë¥•:', error)
  process.exit(1)
})
